// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/jmgilman/gcli/vault/auth"
	"sync"
)

var (
	lockAuthMockAuthDetails sync.RWMutex
	lockAuthMockGetData     sync.RWMutex
	lockAuthMockGetPath     sync.RWMutex
	lockAuthMockName        sync.RWMutex
)

// Ensure, that AuthMock does implement auth.Auth.
// If this is not the case, regenerate this file with moq.
var _ auth.Auth = &AuthMock{}

// AuthMock is a mock implementation of auth.Auth.
//
//     func TestSomethingThatUsesAuth(t *testing.T) {
//
//         // make and configure a mocked auth.Auth
//         mockedAuth := &AuthMock{
//             AuthDetailsFunc: func() map[string]*auth.Detail {
// 	               panic("mock out the AuthDetails method")
//             },
//             GetDataFunc: func(in1 map[string]*auth.Detail) map[string]interface{} {
// 	               panic("mock out the GetData method")
//             },
//             GetPathFunc: func(in1 map[string]*auth.Detail) string {
// 	               panic("mock out the GetPath method")
//             },
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//         }
//
//         // use mockedAuth in code that requires auth.Auth
//         // and then make assertions.
//
//     }
type AuthMock struct {
	// AuthDetailsFunc mocks the AuthDetails method.
	AuthDetailsFunc func() map[string]*auth.Detail

	// GetDataFunc mocks the GetData method.
	GetDataFunc func(in1 map[string]*auth.Detail) map[string]interface{}

	// GetPathFunc mocks the GetPath method.
	GetPathFunc func(in1 map[string]*auth.Detail) string

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// AuthDetails holds details about calls to the AuthDetails method.
		AuthDetails []struct {
		}
		// GetData holds details about calls to the GetData method.
		GetData []struct {
			// In1 is the in1 argument value.
			In1 map[string]*auth.Detail
		}
		// GetPath holds details about calls to the GetPath method.
		GetPath []struct {
			// In1 is the in1 argument value.
			In1 map[string]*auth.Detail
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
}

// AuthDetails calls AuthDetailsFunc.
func (mock *AuthMock) AuthDetails() map[string]*auth.Detail {
	if mock.AuthDetailsFunc == nil {
		panic("AuthMock.AuthDetailsFunc: method is nil but Auth.AuthDetails was just called")
	}
	callInfo := struct {
	}{}
	lockAuthMockAuthDetails.Lock()
	mock.calls.AuthDetails = append(mock.calls.AuthDetails, callInfo)
	lockAuthMockAuthDetails.Unlock()
	return mock.AuthDetailsFunc()
}

// AuthDetailsCalls gets all the calls that were made to AuthDetails.
// Check the length with:
//     len(mockedAuth.AuthDetailsCalls())
func (mock *AuthMock) AuthDetailsCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthMockAuthDetails.RLock()
	calls = mock.calls.AuthDetails
	lockAuthMockAuthDetails.RUnlock()
	return calls
}

// GetData calls GetDataFunc.
func (mock *AuthMock) GetData(in1 map[string]*auth.Detail) map[string]interface{} {
	if mock.GetDataFunc == nil {
		panic("AuthMock.GetDataFunc: method is nil but Auth.GetData was just called")
	}
	callInfo := struct {
		In1 map[string]*auth.Detail
	}{
		In1: in1,
	}
	lockAuthMockGetData.Lock()
	mock.calls.GetData = append(mock.calls.GetData, callInfo)
	lockAuthMockGetData.Unlock()
	return mock.GetDataFunc(in1)
}

// GetDataCalls gets all the calls that were made to GetData.
// Check the length with:
//     len(mockedAuth.GetDataCalls())
func (mock *AuthMock) GetDataCalls() []struct {
	In1 map[string]*auth.Detail
} {
	var calls []struct {
		In1 map[string]*auth.Detail
	}
	lockAuthMockGetData.RLock()
	calls = mock.calls.GetData
	lockAuthMockGetData.RUnlock()
	return calls
}

// GetPath calls GetPathFunc.
func (mock *AuthMock) GetPath(in1 map[string]*auth.Detail) string {
	if mock.GetPathFunc == nil {
		panic("AuthMock.GetPathFunc: method is nil but Auth.GetPath was just called")
	}
	callInfo := struct {
		In1 map[string]*auth.Detail
	}{
		In1: in1,
	}
	lockAuthMockGetPath.Lock()
	mock.calls.GetPath = append(mock.calls.GetPath, callInfo)
	lockAuthMockGetPath.Unlock()
	return mock.GetPathFunc(in1)
}

// GetPathCalls gets all the calls that were made to GetPath.
// Check the length with:
//     len(mockedAuth.GetPathCalls())
func (mock *AuthMock) GetPathCalls() []struct {
	In1 map[string]*auth.Detail
} {
	var calls []struct {
		In1 map[string]*auth.Detail
	}
	lockAuthMockGetPath.RLock()
	calls = mock.calls.GetPath
	lockAuthMockGetPath.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *AuthMock) Name() string {
	if mock.NameFunc == nil {
		panic("AuthMock.NameFunc: method is nil but Auth.Name was just called")
	}
	callInfo := struct {
	}{}
	lockAuthMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockAuthMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedAuth.NameCalls())
func (mock *AuthMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthMockName.RLock()
	calls = mock.calls.Name
	lockAuthMockName.RUnlock()
	return calls
}
